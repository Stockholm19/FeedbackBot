name: Build & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}     # helsinki253/feedbackbot
  APP_DIR: ${{ secrets.VPS_APP_DIR }}           # /apps/feedback-bot

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Debug ‚Äî show files before copy
        run: |
          echo "Current path: $(pwd)"
          echo "Listing repo contents:"
          ls -la
          echo "Looking for compose files:"
          find . -name "docker-compose*.yml" -print || true

      - name: Copy docker-compose.prod.yml to VPS
        if: success()
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: "docker-compose.prod.yml"
          target: ${{ env.APP_DIR }}
          overwrite: true

      - name: Remote deploy on VPS
        if: success()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd "${{ secrets.VPS_APP_DIR }}"
            echo "‚úÖ Connected to VPS"
            ls -la
            if [ ! -f .env ]; then
              echo "‚ùå ERROR: .env file missing in $(pwd)"
              exit 1
            fi

            echo "üîê Logging in to Docker Hub..."
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"

            echo "‚¨áÔ∏è Pulling and restarting containers..."
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d

            echo "üßπ Cleaning up old images..."
            docker image prune -f

            echo "‚úÖ Deployment complete!"
