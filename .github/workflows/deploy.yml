name: Build & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}     # e.g. helsinki253/feedbackbot
  VPS_APP_DIR: ${{ secrets.VPS_APP_DIR }}       # e.g. /apps/feedback-bot

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Mark start time
        id: t0
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: SSH to VPS and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,VPS_APP_DIR,DOCKER_IMAGE
          script: |
            set -euo pipefail

            APP_DIR="${VPS_APP_DIR:-/apps/feedback-bot}"
            mkdir -p "${APP_DIR}" && cd "${APP_DIR}"

            if [ ! -f .env ]; then
              echo "ERROR: ${APP_DIR}/.env is missing." >&2
              exit 1
            fi

            # Write docker-compose.prod.yml on the VPS
            cat > docker-compose.prod.yml <<'YAML'
            services:
              db:
                image: postgres:16-alpine
                container_name: feedback-db
                environment:
                  POSTGRES_DB: ${POSTGRES_DB:-feedback}
                  POSTGRES_USER: ${POSTGRES_USER:-postgres}
                  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
                volumes:
                  - pgdata:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-feedback}"]
                  interval: 5s
                  timeout: 3s
                  retries: 20
                restart: unless-stopped

              app:
                image: ${{ secrets.DOCKER_IMAGE }}:latest
                container_name: feedback-app
                depends_on:
                  db:
                    condition: service_healthy
                env_file: .env
                environment:
                  HOST: 0.0.0.0
                  PORT: 8080
                  POSTGRES_HOST: db
                  AUTO_MIGRATE: "true"
                ports:
                  - "8080:8080"
                healthcheck:
                  test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
                  interval: 30s
                  timeout: 3s
                  retries: 5
                restart: unless-stopped

            volumes:
              pgdata:
            YAML

            echo "üîê Docker Hub login on VPS‚Ä¶"
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

            echo "‚¨áÔ∏è Pull & Up‚Ä¶"
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d

            echo "üßπ Prune‚Ä¶"
            docker image prune -f

      - name: Calculate duration
        id: duration
        run: echo "duration=$(( $(date +%s) - ${{ steps.t0.outputs.start_time }} ))" >> $GITHUB_OUTPUT

      - name: Notify Telegram (success)
        if: success()
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          parse_mode: markdown
          message: |
            ‚úÖ *Build & Deploy ‚Äî OK*
            ‚Ä¢ Repo: `${{ github.repository }}`
            ‚Ä¢ Branch: `${{ github.ref_name }}`
            ‚Ä¢ Commit: `${{ github.event.head_commit.message }}`
            ‚Ä¢ Hash: `${{ github.sha }}`
            ‚Ä¢ By: `${{ github.actor }}`
            ‚Ä¢ Image: `${{ env.DOCKER_IMAGE }}:latest`
            ‚Ä¢ App dir: `${{ secrets.VPS_APP_DIR }}`
            ‚Ä¢ Duration: `${{ steps.duration.outputs.duration }}s`
            üîó Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Notify Telegram (failure)
        if: failure()
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          parse_mode: markdown
          message: |
            ‚ùå *Build/Deploy failed*
            ‚Ä¢ Repo: `${{ github.repository }}`
            ‚Ä¢ Branch: `${{ github.ref_name }}`
            ‚Ä¢ Commit: `${{ github.event.head_commit.message }}`
            ‚Ä¢ Hash: `${{ github.sha }}`
            ‚Ä¢ By: `${{ github.actor }}`
            ‚Ä¢ Image: `${{ env.DOCKER_IMAGE }}:latest`
            ‚Ä¢ Duration: `${{ steps.duration.outputs.duration }}s`
            üîó Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
