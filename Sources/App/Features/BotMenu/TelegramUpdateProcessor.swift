//
//  TelegramUpdateProcessor.swift
//  FeedbackBot
//
//  Created by –†–æ–º–∞–Ω –ü—à–µ–Ω–∏—á–Ω–∏–∫–æ–≤ on 10.10.2025.
//

import Vapor
import Fluent
import Foundation

enum SessionKey {
    static let state = "state"
    static let awaiting = "awaiting_feedback"
}

/// –í—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (–º–µ–Ω—é ‚Üí –ø—Ä–∏—ë–º –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
enum TelegramUpdateProcessor {

    // MARK: - Helpers
    
    // –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    private static func mainKeyboard(app: Application, userID: Int64) -> TGReplyKeyboardMarkup {
        var row: [TGKeyboardButton] = [TGKeyboardButton(text: "–û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]
        if app.adminIDs.contains(userID) {
            row.append(TGKeyboardButton(text: "–≠–∫—Å–ø–æ—Ä—Ç"))
        }
        return TGReplyKeyboardMarkup(
            keyboard: [row],
            resize_keyboard: true,
            one_time_keyboard: false
        )
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ (–æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
    private static func inputKeyboard() -> TGReplyKeyboardMarkup {
        return TGReplyKeyboardMarkup(
            keyboard: [[TGKeyboardButton(text: "–ù–∞–∑–∞–¥")]],
            resize_keyboard: true,
            one_time_keyboard: false
        )
    }

    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–º–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö/–ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —á–∞—Ç
    private static var exportLocks = Set<Int64>()
    private static let exportLockQueue = DispatchQueue(label: "tg.export.lock")
    private static func beginExportLock(chatID: Int64) -> Bool {
        return exportLockQueue.sync {
            if exportLocks.contains(chatID) { return false }
            exportLocks.insert(chatID)
            return true
        }
    }
    private static func endExportLock(chatID: Int64) {
        exportLockQueue.sync { exportLocks.remove(chatID) }
    }

    /// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É: —Å—Ä–µ–∑–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å @BotName –∏ –ø—Ä–æ–±–µ–ª—ã/–∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä: "/export@MyBot arg" -> "/export"
    private static func normalizeCommand(_ text: String) -> String {
        guard text.hasPrefix("/") else { return text }
        let firstToken = text.split(separator: " ").first.map(String.init) ?? text
        let head = firstToken.split(separator: "@").first.map(String.init) ?? firstToken
        return head
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç CSV. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    private static func doExport(app: Application, chatID: Int64, userID: Int64) async throws {
        guard app.adminIDs.contains(userID) else {
            await app.telegram.sendMessage(chatID, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", keyboard: mainKeyboard(app: app, userID: userID))
            return
        }

        // –ê–Ω—Ç–∏-–¥—É–±–ª—å: –µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º
        guard beginExportLock(chatID: chatID) else {
            await app.telegram.sendMessage(chatID, "–≠–∫—Å–ø–æ—Ä—Ç —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è‚Ä¶", keyboard: mainKeyboard(app: app, userID: userID))
            return
        }
        defer { endExportLock(chatID: chatID) }

        do {
            let items = try await Feedback.query(on: app.db)
                .sort(\.$createdAt, .descending)
                .all()
            if items.isEmpty {
                app.logger.info("Export requested but no items found")
                await app.telegram.sendMessage(chatID, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", keyboard: mainKeyboard(app: app, userID: userID))
                return
            }

            app.logger.info("Export requested by userID=\(userID), count=\(items.count)")
            await app.telegram.sendMessage(chatID, "–ì–æ—Ç–æ–≤–ª—é —ç–∫—Å–ø–æ—Ä—Ç: \(items.count) –∑–∞–ø–∏—Å–µ–π‚Ä¶", keyboard: mainKeyboard(app: app, userID: userID))

            app.logger.info("CSV: start building")
            let headers = [
                "–î–∞—Ç–∞",
                "–í—Ä–µ–º—è",
                "ID",
                "–°—Ç–∞—Ç—É—Å",
                "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "Username",
                "–û—Ç–¥–µ–ª/–¢–µ–≥",
                "–ò—Å—Ç–æ—á–Ω–∏–∫",
                "–¢–µ–∫—Å—Ç"
            ]

            // –ë–∞–∑–æ–≤–æ–µ ¬´—Å–µ–π—á–∞—Å¬ª ‚Äî –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞—Ç
            let now = Date()

            // –•–µ–ª–ø–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
            func formatDatePair(_ date: Date?) -> (String, String) {
                
                let d = date ?? now
                
                // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–¥–≤–∏–≥ –¥–ª—è –ú–æ—Å–∫–≤—ã: +03:00 (–ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–µ—Ç)
                let offset: TimeInterval = 3 * 3600
                let local = d.addingTimeInterval(offset)
                var gmtCal = Calendar(identifier: .gregorian)
                gmtCal.timeZone = TimeZone(secondsFromGMT: 0)!
                let c = gmtCal.dateComponents([.day, .month, .year, .hour, .minute], from: local)
                let dStr = String(format: "%02d.%02d.%04d", c.day ?? 0, c.month ?? 0, c.year ?? 0)
                let tStr = String(format: "%02d:%02d", c.hour ?? 0, c.minute ?? 0)
                return (dStr, tStr)
            }

            // –°–æ–±–∏—Ä–∞–µ–º CSV –≤ Data (CRLF + BOM), –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è Linux/Excel
            let data = CSVExporter.exportData(
                headers: headers,
                rows: items,
                delimiter: ";",
                lineEnding: .crlf,
                addUTF8BOM: true
            ) { f in
                let (dStr, tStr) = formatDatePair(f.createdAt)
                return [
                    dStr,
                    tStr,
                    f.id?.uuidString ?? "",
                    String(describing: f.status),
                    String(describing: f.userID),
                    f.username ?? "",
                    f.officeTag ?? "",
                    f.source ?? "",
                    f.text
                ]
            }

            var buf = ByteBufferAllocator().buffer(capacity: data.count)
            buf.writeBytes(data)
            app.logger.info("CSV: built buffer, bytes=\(data.count)")

            if buf.readableBytes == 0 {
                app.logger.warning("CSV buffer is empty ‚Äî aborting sendDocument")
                await app.telegram.sendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å CSV: —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π.", keyboard: mainKeyboard(app: app, userID: userID))
                return
            }

            await app.telegram.sendDocument(
                chatID,
                filename: "feedback_export.csv",
                data: buf,
                caption: "–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤ ‚úÖ",
                keyboard: mainKeyboard(app: app, userID: userID)
            )
            app.logger.info("CSV: sent to Telegram")

        } catch {
            app.logger.error("export failed: \(String(describing: error))")
            await app.telegram.sendMessage(chatID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç üòï\n" + String(describing: error), keyboard: mainKeyboard(app: app, userID: userID))
        }
    }

    // MARK: - Entry

    static func handle(update: TGUpdate, app: Application) async throws {
        guard let msg = update.message,
              let raw = msg.text?.trimmingCharacters(in: .whitespacesAndNewlines),
              !raw.isEmpty else { return }

        let chatID = msg.chat.id
        let userID = msg.from?.id ?? chatID
        let username = msg.from?.username
        let text = raw
        let cmd = normalizeCommand(text)

        app.logger.info("TG Update: text=\(text), cmd=\(cmd), userID=\(userID), chatID=\(chatID)")

        // 1) /export ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if cmd == "/export" {
            // —Å–±—Ä–æ—Å–∏–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à—ë–ª –≤ —ç–∫—Å–ø–æ—Ä—Ç
            SessionStore.shared.set(chatID, key: SessionKey.state, value: "")
            try await doExport(app: app, chatID: chatID, userID: userID)
            return
        }

        // 2) /whoami ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if cmd == "/whoami" {
            await app.telegram.sendMessage(chatID, "userID=\(userID), chatID=\(chatID)\nadmins=\(Array(app.adminIDs))", keyboard: mainKeyboard(app: app, userID: userID))
            return
        }

        // 3) /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if cmd == "/start" {
            let kb = mainKeyboard(app: app, userID: userID)
            await app.telegram.sendMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ *–°–∞—è–Ω –°–∞–Ω—ã—á*.\n–ì–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å.", keyboard: kb)
            return
        }

        // 4) –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–≠–∫—Å–ø–æ—Ä—Ç"
        if text == "–≠–∫—Å–ø–æ—Ä—Ç" {
            // —Å–±—Ä–æ—Å–∏–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à—ë–ª –≤ —ç–∫—Å–ø–æ—Ä—Ç
            SessionStore.shared.set(chatID, key: SessionKey.state, value: "")
            try await doExport(app: app, chatID: chatID, userID: userID)
            return
        }

        // 5) –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" ‚Äî –∂–¥—ë–º —Ç–µ–∫—Å—Ç
        if text == "–û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" {
            SessionStore.shared.set(chatID, key: SessionKey.state, value: SessionKey.awaiting)
            await app.telegram.sendMessage(
                chatID,
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —Å —á–µ–º —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ñ–∏—Å–∞. –Ø –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.",
                keyboard: inputKeyboard()
            )
            return
        }

        // 5.1) "–ù–∞–∑–∞–¥" ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if text == "–ù–∞–∑–∞–¥" {
            SessionStore.shared.set(chatID, key: SessionKey.state, value: "")
            await app.telegram.sendMessage(
                chatID,
                "–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—É–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                keyboard: mainKeyboard(app: app, userID: userID)
            )
            return
        }

        // 6) –ï—Å–ª–∏ –∂–¥—ë–º —Ç–µ–∫—Å—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (SessionStore.shared.get(chatID, key: SessionKey.state) as? String) == SessionKey.awaiting {
            SessionStore.shared.set(chatID, key: SessionKey.state, value: "")
            let item = Feedback(
                text: text,
                userID: userID,
                username: username,
                chatID: chatID,
                status: .new,
                officeTag: nil,
                source: "telegram"
            )
            try await item.save(on: app.db)

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º (—Å–ø–∏—Å–æ–∫ –∏–∑ .env: NOTIFY_CHAT_IDS=123,456)
            let notifyEnabled = (Environment.get("NOTIFY_ENABLED") ?? "false").lowercased() == "true"
            if notifyEnabled, let idsString = Environment.get("NOTIFY_CHAT_IDS") {
                let ids = idsString
                    .split(separator: ",")
                    .compactMap { Int64($0.trimmingCharacters(in: .whitespaces)) }

                guard !ids.isEmpty else {
                    app.logger.info("NOTIFY_ENABLED=true, –Ω–æ —Å–ø–∏—Å–æ–∫ NOTIFY_CHAT_IDS –ø—É—Å—Ç ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã")
                    return
                }

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–æ—Å–∫–æ–≤—Å–∫–∏–º +03:00
                let created = item.createdAt ?? Date()
                let offset: TimeInterval = 3 * 3600
                let local = created.addingTimeInterval(offset)
                var gmtCal = Calendar(identifier: .gregorian)
                gmtCal.timeZone = TimeZone(secondsFromGMT: 0)!
                let c = gmtCal.dateComponents([.day, .month, .year, .hour, .minute], from: local)
                let dStr = String(format: "%02d.%02d.%04d", c.day ?? 0, c.month ?? 0, c.year ?? 0)
                let tStr = String(format: "%02d:%02d", c.hour ?? 0, c.minute ?? 0)

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —è–≤–Ω—ã–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è (–∫–æ—Ä–æ—Ç–∫–∏–π UUID)
                let ticketUUID = item.id?.uuidString ?? ""
                let ticketShort = ticketUUID.isEmpty ? "‚Äî" : String(ticketUUID.prefix(8))
                let userTag = (username?.isEmpty == false) ? "@\(username!)" : "<–±–µ–∑ username>"

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞—Ç–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è.
                // –ß–∞—Ç –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç userID (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø).
                let chatLine: String = (chatID != userID) ? "\n–ß–∞—Ç Telegram: \(chatID)\n" : "\n"

                let msg = """
                ‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                –î–∞—Ç–∞: \(dStr) \(tStr)
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \(userTag) (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(userID))
                ID –æ–±—Ä–∞—â–µ–Ω–∏—è: \(ticketUUID)
                \(chatLine)
                –¢–µ–∫—Å—Ç:
                \(text)
                """

                for id in ids {
                    await app.telegram.sendMessage(id, msg)
                }

                app.logger.info("Notifications sent to \(ids.count) responsible user(s)")
            } else {
                app.logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (NOTIFY_ENABLED=false)")
            }

            await app.telegram.sendMessage(chatID, "‚úÖ *–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å ‚Äî –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ.*", keyboard: mainKeyboard(app: app, userID: userID))
            return
        }

        // 7) Fallback
        await app.telegram.sendMessage(chatID, "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ */start* –¥–ª—è –º–µ–Ω—é.", keyboard: mainKeyboard(app: app, userID: userID))
    }
}
